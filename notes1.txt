










abbreviated test:

delete dist folder
confirm the website index.html has links to versions 6 and 7
set package.json to 6
npm run build
set package.json to 7
npm run build
upload both setup exes and latest.yml

reset vmware
download and install 6
see that it updates to 7

reset vmware
download and install 7, see that it doesn't do anything




ugh, it's not deterministic
two different vmware tests with exactly the same files online yielded a double install the first time
and a single install the second time

try to get the version number everywhere--how does electron-updater decide that it needs to update?
as a safety precaution, have a setting so it only tries an update once a day


or you put your own sanity check, read your own file online next to latest.yml, match the version number there with what you've got




see how it behaves if you mess up the hash in latest.yml
even if you messed that up, how do you explain it acting differently in two sequential vmware tests, and exactly the same stuff on the server?
so, put in the following additional safeguards
-hardcoded delay to not try more frequently than that
-local settings json for when you last tried
-your own version sanity check
or maybe do all this when you do the other autoupdate improvements, actually















steps to test a real automatic update
all this works without code signing

modified from:
https://gist.github.com/iffy/0ff845e8e3f59dbe7eaf2bf24443f104

environment:
build on host win10
upload files to zootella.com
install on vmware win10

clone and run:
$ git clone https://github.com/zootella/tortuga
$ cd tortuga
$ npm install
$ npm run start

build:
delete the dist folder
increment the version in package.json, and the index.html you'll upload to zootella.com
$ npm run build, runs electron-builder plain
upload to zootella.com: (1) Tortuga-1.0.6.exe, and (2) latest.yml, which has the hash of just 1.0.6
in vmware, restore 'firefox' snapshot, navigate browser to zootella.com/tortuga, download and run the setup exe
the electron window says "Current version: v1.0.6, Update not available."

publish and update:
increment the version in package.json, and the index.html you'll upload to zootella.com
$ npm run build, runs electron-builder plain
upload to zootella.com: (1) Tortuga-1.0.7.exe, and (2) latest.yml, which now has the hash of just 1.0.7
in vmware, run tortuga
it finds update, downloads, closes, installs, and runs the new version




>next
refactor and understand the example
test the build and update for mac





dir and regular is maybe all you need
see where it makes the asar, you do want to be able to see what went into the asar




how can you get to the package.json version number in electron main or renderer?
see how the file manager does it maybe


